# Файл — это всего лишь набор данных, сохраненный в виде последовательности битов на компьютере.
# Информация хранится в куче данных (структура данных) и имеет название «имя файла».
# В Python существует два типа файлов:
# 1.	Текстовые
# 2.	Бинарные
# Текстовые файлы - это файлы с понятным человеку содержимым.
# В них хранятся последовательности символов, понятные человеку.
# Блокнот и другие стандартные редакторы умеют читать и редактировать этот тип файлов.
# Текст может храниться в двух форматах: (.txt) — простой текст и (.rtf) — «формат обогащенного текста».

# Любую операцию с файлом можно разбить на три крупных этапа:
# 1.	Открытие файла
# 2.	Выполнение операции (запись, чтение)
# 3.	Закрытие файла

file = open('text.txt', 'r', encoding='utf-8')
data = file.read()
print(data)
file.close()

file = open('text2.txt', 'w', encoding='utf-8')
data = '----- Строка для записи в файл -----'
file.write(data)
file.close()

file = open('text2.txt', 'w', encoding='utf-8')
data = ['1', '2', '3', '4']
file.writelines(data)
file.close()



def open_file(file_path, mode="r", code="utf-8"):
    try:
        file = open(file_path, mode, encoding=code) # encoding="cp1252"
    except IOError as e:
        print("Ошибка открытия файла:", e)
        file = None
    return file

def read_file(file):
    if file is None:
        print("Файл не открыт")
        data = None
    else:
        data = file.read()
    return data

def write_file(file, data):
    if file is None:
        print("Файл не открыт.")
    else:
        file.write(data)

def close_file(file):
    if file is not None:
        file.close()
        file = None

# Создание функций для работы с файлами предполагает совокупность связанных с ними алгоритмов чтения, записи,
# проверки читаемости. Метаданные, полученные в результате работы с файлами, обычно являются возвратным
# результатом функций. В дальнейшем вы узнаете, как еще эффективнее использовать методы работы с файлами через
# создание классов ООП (объектно-ориентированного программирования). Классы, наделенные нашими методами,
# смогут обеспечить управляемый и структурированный способ работы с файлами. Часто создание таких методов
# способствует повторному использованию кода и расширяет его влияние на программу

my_file = open_file("some0.txt")
data_read = read_file(my_file)
print(data_read)
close_file(my_file)

# Таким образом, обработка исключений при открытии файлов внутри функции позволяет избегать прерывания
# работы программы и ошибок, связанных с некорректным вводом данных или доступом к файлам.
# Реализация обработки ошибок внутри функций также позволяет легче поддерживать и развивать код,
# сохраняя его устойчивость и надежность.