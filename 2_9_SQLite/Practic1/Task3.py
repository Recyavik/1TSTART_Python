# Управление конкурентным доступом:
import sqlite3
# Создание подключения к базе данных
conn = sqlite3.connect('products_db.db')
# Настройка режима блокировки для поддержки конкурентного доступа
conn.execute("PRAGMA locking_mode = EXCLUSIVE")
# В этом примере мы используем команду PRAGMA locking_mode для настройки режима блокировки базы данных.
# В данном случае, мы устанавливаем режим блокировки EXCLUSIVE, который предотвращает одновременный
# доступ нескольких пользователей или процессов к базе данных. Затем мы выполняем запросы
# в рамках конкурентного доступа и закрываем подключение.
# Создание объекта-курсора
cursor = conn.cursor()
# Выполнение запросов в рамках конкурентного доступа
cursor.execute("SELECT * FROM products")
rows = cursor.fetchall()

# ЭТАП ВТОРОЙ
cursor.execute("SELECT name FROM products WHERE price >= (SELECT AVG(price) FROM products)")
# Получение результатов
rows = cursor.fetchall()
# Вывод результатов
for row in rows:
    print(row[0])
# В этом примере мы используем метод execute() курсора для выполнения вложенного запроса.
# Внешний запрос выбирает имена пользователей из таблицы «price»,
# у которых возраст превышает средний возраст, полученный во вложенном запросе.
# Мы используем метод fetchall() для получения результатов выборки и выводим их.
# Закрытие подключения
conn.close()

