"""
dict = {key1: value1, key2: value2, …, keyN:valueN}
""" #
# В жизни широко распространены словари, например, привычные бумажные словари
# (толковые, орфографические, лингвистические). В них ключом является слово
# — заголовок статьи, а значением — сама статья. Для того чтобы получить
# доступ к статье, необходимо указать слово-ключ.
# Другой пример словаря как структуры данных — телефонный справочник.
# В нем ключом является имя, а значением — номер телефона.
# И словарь, и телефонный справочник хранятся так,
# что легко найти элемент словаря по известному ключу.
# Опять же огл

english_dict = {"house": "дом", "car": "машина", "tree": "дерево", "road": "дорога", "river": "река"}
print(english_dict)
rating_dict = {2: "неудовлетворительно", 3: "удовлетворительно", 4: "хорошо", 5: "отлично"}
print(rating_dict)
age_dict = {'Таня': 14, 'Маша': 15, 'Глеб': 14, 'Марина': 17, 'Андрей': 15}
print(age_dict)

data_dict = {"Гагарин": "Юрий", "Apple": "Яблоко", "Глеб": 15, "Россия": 8.55, 251616: 'Мухин Саша'}
print(data_dict.values())
print(data_dict.keys())
print(data_dict.get("Гагарин"))
print()

# Для добавления элементов словаря
data_dict['Месси'] = 'Лионель'
print(data_dict)
del data_dict['Глеб']
print(data_dict)

# 1 способ (итерация по ключам)
for key in data_dict.keys():
    print(key)
print()

# 2 способ (итерация по значениям)
for val in data_dict.values():
    print(val)
print()

# 3 способ (итерация по ключам с явным указанием)
for key in data_dict.keys():
    print(key,":", data_dict[key])
print()

# 4 способ по ключам и значениям
for key, val in data_dict.items():
    print(key,":", val)

### Встроенная функция reversed и слайсинг позволяют проводить итерацию по объекту в обратном порядке.
for key, val in reversed(data_dict.items()):
    print(key,":", val)

