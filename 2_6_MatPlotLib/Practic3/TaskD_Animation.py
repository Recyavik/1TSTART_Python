# Matplotlib имеет модуль animation, который предоставляет классы и функции для создания анимаций.
# Основной класс, используемый для создания анимаций, - FuncAnimation.
# Он позволяет обновлять график с заданной частотой, создавая эффект анимации.

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython import display

# Создаём фигуру и оси для графика, который будет анимироваться.
fig, ax = plt.subplots()
xdata, ydata = [], []
ln, = plt.plot([], [], 'go')


# При отображении графиков граничные значения по каждой из осей по умолчанию определяются автоматически,
# исходя из набора отображаемых данных. Однако, иногда требуется указывать свои лимитные значения.
# Для существующих осей (после их создания) настройка граничных значений производится с помощью метода set,
# следующим образом:
def init():
    ax.set_xlim(0, 2*np.pi)
    ax.set_ylim(-1, 1)
    return ln,

# Определяем функцию, которая будет вызываться для обновления графика на каждом кадре анимации.
def update(frame):
    xdata.append(frame)
    ydata.append(np.cos(frame))
    ln.set_data(xdata, ydata)
    return ln,
# функция update(), обновляет позицию точки на графике на каждом кадре анимации.
# Эта функция передается в FuncAnimation в качестве аргумента для обновления графика на каждом шаге.

# Создадим экземпляр FuncAnimation, указав фигуру, функцию обновления и другие параметры анимации.
ani = FuncAnimation(fig, update, frames=np.linspace(0, 2*np.pi, 128),
                    init_func=init, blit=True)
# ani.save('animation.gif')
plt.show()
# Matplotlib предоставляет обширный функционал для визуализации данных и анализа результатов.
# Это мощная библиотека, которая позволяет создавать качественные и информативные графики.
# При необходимости вы можете углубиться в документацию Matplotlib для более
# детального изучения различных функций и возможностей.