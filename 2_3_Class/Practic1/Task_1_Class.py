# Классы в Python являются основой объектно-ориентированного программирования (ООП),
# что представляет собой подход к программированию, основанный на концепции «объектов»,
# имеющих данные и действия (методы), которые могут выполняться над данными.
# Класс определяет структуру объекта, его свойства и методы.
# Он служит как шаблон для создания объектов (экземпляров),
# каждый из которых является отдельным элементом с данными (атрибутами) и операциями (методами),
# которые можно выполнить над данными.

# Основы объектно-ориентированного программирования (ООП) включают следующие концепции:
#
# 1. Классы (Classes). Класс — это шаблон или схема для создания объектов. О
# н описывает свойства (атрибуты) и методы (операции),
# которые будут общими для всех объектов, созданных на основе класса.
"""
class НазваниеКласса:
    атрибуты_класса
    атрибуты экземпляров класса
    свойства класса
    методы_класса и методы экземпляров класса
""" #

# Нотация — это соглашение об именовании.
# first_name - under_score (Нотация подчёркивания)
# Person - CamelCase (Верблюжья нотация)

"""
экземпляр_класса =  НазваниеКласса()
экземпляр_класса.атрибут экземпляра класса
экземпляр_класса.метод экземпляра класса()
""" #

class NameClass:
    pass

# Объекты (Objects). Объект — это конкретный экземпляр класса.
# Он содержит свойства и методы, определенные классом.
# Объекты также могут иметь уникальные значения свойств,
# которые отличаются от значений по умолчанию, установленных классом.

instance1 = NameClass()
instance2 = NameClass()

# Создадим класс
class Person:
# Функции внутри класса называют методами класса (и с применением ООП функция утрачивает свою понятийность
# Она становится методом класса и методом его экземпляров)
    def say(self):
        print("Говорю")
    def go(self):
        print("окей, Иду")

    @classmethod
    def big_say(cls):
        print("Говорю громко")

# Создадим экземпляры класса
anna = Person()
gleb = Person()
# Экземпляры класса будут содержать все описанные в классе методы и можно к ним обращаться через точку.
# Так же как мы обращались к классу turtle и его методу penup()
anna.say()
anna.go()
gleb.say()
gleb.go()
Person.big_say()



