# Еще один момент о котором хочется рассказать
# - это значения по умолчанию атрибутов класса и экземпляров класса

# Создадим класс
class PersonFast:
# У него общий атрибут, который принадлежит и самому классу и его экземплярам - это скорость по умолчанию
    speed_default = 1
# Инициализируем атрибуты принадлежащие только экземплярам класса - это имя и скорость, причём
# значение атрибута самого класса будет являться значением по умолчанию для атрибута скорости экземпляра класса
    def __init__(self, name="безымянный", speed=speed_default):
        self.name = name
        self.speed = speed

    def sing(self):
        print(self.name, ": поёт")

    def info(self):
        print('Имя:', self.name)
        print('Скорость:', self.speed)
# Будем использовать в другом методе экземпляра класса эти атрибуты
    def go(self):
        print(self.name, "идёт со скоростью: ", self.speed, "км/ч")
        if self.speed < 3:
            self.sing()



gleb = PersonFast(name="Глеб")
gleb.info()
print('----')
gleb.go()

kolya = PersonFast(speed=5)
kolya.info()
kolya.go()

misha = PersonFast("Миша", 4)
misha.info()
misha.speed = 3
misha.info()
misha.go()

# Сводя всё вместе:
#
# - Атрибуты класса используются для хранения значений, общих для всех объектов класса.
# - Атрибуты экземпляров используются для хранения значений, уникальных для каждого объекта класса.
# - Атрибуты класса доступны через класс и все его объекты,
# в то время как атрибуты экземпляров доступны только через объекты класса.
# - Атрибуты класса имеют общую память между всеми объектами класса,
# а атрибуты экземпляров хранятся отдельно для каждого объекта.

# В общем, использование классов делает ваш код более структурнным,
# повторно используемым и гибким, что облегчает разработку, отладку и поддержку вашей программы

