# В Pandas есть функциональность для чтения и записи данных в различных форматах, таких как CSV и Excel.
# Давайте рассмотрим некоторые методы для выполнения этих операций:
import pandas as pd

df = pd.read_csv("olimp.csv")
print(df)

data = {
    "Имя": ["Таня", "Андрей", "Миша"],
    "Возраст": [25, 30, 35],
    "Город": ["Москва", "Иркутск", "Сочи"],
}
df = pd.DataFrame(data)
df.to_csv("data.csv", index=False)

# pip install openpyxl

df.to_excel("data.xlsx", sheet_name="Лист 1", index=False)

df = pd.read_excel("data.xlsx", "Лист 1")
print(df)

df["Зарплата"] = [50_000, 60_000, 70_000]
df.to_excel("data_add.xlsx", sheet_name="Лист 1", index=False)
print(df)

df.drop("Город", axis=1, inplace=True)  # Удаление столбца
df.drop(1, inplace=True)  # Удаление строки по индексу
print(df)

df["Возраст"] = df["Возраст"] + 1
df["Зарплата"] = df["Зарплата"].apply(
    lambda x: x + x * 0.1
)  # Применение функции к значениям столбца
print(df)

df2 = pd.read_csv("olimp.csv")
df2.to_excel("olimpic.xlsx", sheet_name="Olimpic", index=False)
df2.sort_values(
    by="Возраст", ascending=False, inplace=True
)  # Сортировка по столбцу 'Возраст'
df2.sort_values(
    by="Возраст", ascending=True, inplace=True
)  # Сортировка по столбцу 'Возраст'
print(df2)

df3 = pd.DataFrame(
    {
        "Имя": ["Андрей", "Тимур"],
        "Класс": [9, 9],
        "Возраст": [14, 15],
        "Математика": [40, 50],
        "Физика": [50, 40],
        "Информатика": [60, 60],
        "Химия": [90, 80],
    }
)
df = pd.concat([df2, df3])
print(df)
df.drop_duplicates(inplace=True)  # Удаление полных дубликатов строк
print(df)
df.drop_duplicates(
    subset=["Имя"], inplace=True
)  # Удаление полных дубликатов строк по столбцу Имя
print(df)

# Pandas предоставляет возможности для базовой визуализации данных, которые могут быть полезны
# при исследовании и анализе данных. Визуализация помогает наглядно представить информацию и выявить паттерны и тренды.
# Вот некоторые методы для визуализации данных с помощью Pandas:

import pandas as pd
import matplotlib.pyplot as plt

data = {"Возраст": [25, 25, 30, 30, 30, 35, 40, 40, 45, 50, 50, 55, 65]}
df = pd.DataFrame(data)
df["Возраст"].plot.hist()  # Построение гистограммы
# Дополнительные параметры для настройки графика (название, метки осей, размер и т.д.)
plt.title("Распределение возраста")
plt.xlabel("Возраст")
plt.ylabel("Частота")
plt.show()  # Отображение графика


data = {
    "Страна": ["Россия", "США", "Китай", "Германия", "Франция"],
    "Население": [144, 331, 1444, 83, 67],
}
df = pd.DataFrame(data)
df.plot.pie(
    y="Население", labels=df["Страна"], autopct="%1.1f%%"
)  # Построение круговой диаграммы
plt.title("Доля населения по странам")
plt.show()

data = {"Год": [2015, 2016, 2017, 2018, 2019], "Продажи": [100, 150, 200, 120, 180]}
df = pd.DataFrame(data)
df.plot(x="Год", y="Продажи")  # Построение линейного графика
plt.title("Динамика продаж")
plt.xlabel("Год")
plt.ylabel("Продажи")
plt.show()

data = {
    "Возраст": [25, 30, 35, 40, 45, 50, 55, 60, 65],
    "Зарплата": [50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000],
}
df = pd.DataFrame(data)
df.plot.scatter(x="Возраст", y="Зарплата")  # Построение диаграммы разброса
plt.title("Связь между возрастом и зарплатой")
plt.xlabel("Возраст")
plt.ylabel("Зарплата")
plt.show()

# Продвинутые возможности
data = {
    "Название": ["Apple", "Banana", "Cherry"],
    "Описание": ["Яблоко красное", "Банан желтый", "Вишня кислая"],
}
df = pd.DataFrame(data)
# Использование методов для работы с текстовыми данными
df["Название_в_верхнем_регистре"] = df["Название"].str.upper()
df["Описание_длина"] = df["Описание"].str.len()
print(df)
# Методы, начинающиеся с .str, позволяют выполнять операции со строками в столбцах, содержащих текстовые данные.
# В данном примере мы использовали метод .upper() для преобразования названий фруктов в верхний регистр и метод .len()
# для вычисления длины описаний.

data = {"Фрукт": ["Яблоко", "Банан", "Яблоко", "Вишня", "Банан"]}
df = pd.DataFrame(data)
# Преобразование столбца в категориальный тип данных
df["Фрукт"] = df["Фрукт"].astype("category")
print(df["Фрукт"].dtype)
print(df["Фрукт"].cat.categories)
# Мы можем преобразовать столбец в категориальный тип данных с помощью метода .astype('category').
# Это может быть полезно, когда у нас есть ограниченное количество уникальных значений в столбце.
# В примере мы проверяем тип данных столбца и выводим доступные категории.

# Генерация большого DataFrame
data = {"ID": range(1000000), "Зарплата": range(1000000)}
df = pd.DataFrame(data)
print(df)
# Использование типа данных с фиксированной точностью
df["Зарплата"] = df["Зарплата"].astype("int32")
print(df.dtypes)

# Мы можем оптимизировать производительность работы с большими объемами данных, устанавливая подходящие типы данных.
# В данном примере мы использовали тип данных 'int32' для столбца 'Зарплата', чтобы уменьшить использование памяти.
# В заключение, мы рассмотрели основные возможности библиотеки pandas и узнали, как она может быть полезна при работе
# с данными. Мы изучили основные структуры данных, такие как Series и DataFrame, и научились выполнять на них различные
# операции, включая фильтрацию, сортировку и группировку данных.
# Мы также рассмотрели способы обработки пропущенных значений и работы с временными рядами. Pandas предоставляет мощные
# инструменты для анализа данных, и мы изучили некоторые из них, такие как агрегирование данных, применение функций к
# группам данных и объединение данных из разных источников.
# Важным аспектом работы с pandas всегда останется эффективная обработка больших объемов данных.
